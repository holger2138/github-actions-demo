name: Test Github Actions demo

run-name: ${{ github.actor }} is testing out GitHub Actions 🚀

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: main
  CONFIG_FILE: OpenWrt-OPKG-TR3000-256MB-V1.config
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: CUDY_TR3000_V1_114M_OP_24_10_2
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Server Performance
        run: |
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "======== 分隔符 ========"
          echo "当前时间: $(date +'%Y-%m-%d %H:%M:%S')"
          echo "当前工作目录: $(pwd)"
          echo "当前用户: $(whoami)"
          echo "当前分支: ${{ github.ref }}"
          echo "当前事件: ${{ github.event_name }}"
          echo "当前工作流: ${{ github.workflow }}"
          echo "当前运行ID: ${{ github.run_id }}"
          echo "======== 分隔符 ========"
          sudo apt-get update -y
          sudo apt-get install -y git wget curl lsb-release ccache
          sudo timedatectl set-timezone "$TZ"

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
          cd openwrt
          echo "========> 当前路径：$(pwd)"
          ls -Ahil
          echo "======== 分隔符 ========"
          cat $GITHUB_ENV
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "======== 分隔符 ========"
          cat $GITHUB_ENV

      - name: Generate Variables
        run: |
          cp $CONFIG_FILE $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "======== 分隔符 ========"
          cat $GITHUB_ENV
          echo "======== 分隔符 ========"
          cat .config | grep -i ^CONFIG_TARGET

      - name: Cache Toolchain
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: true
          toolchain: true
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: Update and Install Feeds
        run: |
          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Download DL Package
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check Space Usage
        # if: (!cancelled())
        run: df -hT

  call-workflow-1-in-local-repo:
    uses: ./.github/workflows/reusable.yml
